on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017

    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: List directory contents for debugging
      - name: List directory contents
        run: ls -R

      # Step 3: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # Step 4: Install backend dependencies
      - name: Install backend dependencies
        run: |
          cd register.login/api_backend
          npm install

      # Step 5: Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd register.login/login-register-with-node
          npm install

      # Step 6: Set SSL options
      - name: Set SSL options
        run: |
          cd register.login/api_backend
          ls -l ./keys  # List the contents of the keys directory
          chmod 644 ./keys/server.key
          chmod 644 ./keys/server.crt

      # Step 7: Build React App
      - name: Build React App
        run: |
          cd register.login/login-register-with-node
          npm run build

      # Step 8: Check SSL configuration
      - name: Check SSL configuration
        run: |
          cd register.login/api_backend
          if [ ! -f ./keys/server.key ] || [ ! -f ./keys/server.crt ]; then
            echo "SSL certificate or key missing" && exit 1
          fi

      # Step 9: Start the server
      - name: Start server
        run: |
          cd register.login/api_backend
          node server.js &
          sleep 15  # Allow time for the server to start

      # Step 10: Check HTTPS redirection
      - name: Check HTTPS redirection
        run: |
          if ! curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep -q "301"; then
            echo "HTTPS redirection not enforced" && exit 1
          fi

      # Step 11: Run server integration check
      - name: Run server check
        run: |
          curl -f http://localhost:3000 || exit 1

      # Step 12: Check for protection against additional attacks
      - name: Security Attack Checks
        run: |
          cd register.login/api_backend
          # Check for Clickjacking Protection
          if ! grep -q "frameguard" App.js; then
            echo "Clickjacking protection missing (Helmet's frameguard)" && exit 1
          fi
          # Check for Session Jacking Protection
          if ! grep -q "cookieSession" App.js; then
            echo "Session hijacking protection missing (cookie-session middleware)" && exit 1
          fi
          # Check for SQL Injection Prevention
          if ! grep -q "findOne(" App.js; then
            echo "SQL Injection protection missing (use Mongoose methods like findOne)" && exit 1
          fi
          # Check for Cross-Site Scripting (XSS) Protection
          if ! grep -q "xss-clean" App.js; then
            echo "XSS protection missing (xss-clean middleware)" && exit 1
          fi
          # Check for Man-in-the-Middle Attack Protection
          if ! grep -q "Strict-Transport-Security" App.js; then
            echo "HSTS header missing (use Helmet to enforce Strict-Transport-Security)" && exit 1
          fi
          # DDoS Protection (Rate Limiting and Network Throttling)
          if ! grep -q "express-rate-limit" App.js; then
            echo "DDoS protection missing (express-rate-limit middleware)" && exit 1
          fi

      # Step 13: Upload results 
      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./test-results

